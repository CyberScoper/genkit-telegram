// user-ai-assistant.js
// ü§ñ Telegram user-mode AI —á–µ—Ä–µ–∑ gramjs + Genkit (—Ç–µ–ø–µ—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π reply —Ç–æ–ª—å–∫–æ –∫ —Å–µ–±–µ)

import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { NewMessage } from "telegram/events/index.js";
import input from "input";
import dotenv from "dotenv";
import axios from "axios";
import fs from "fs";
import express from "express";
import { genkit } from "genkit";
import { googleAI, gemini20Flash } from "@genkit-ai/googleai";

dotenv.config();

// === Genkit AI —Å–µ—Ä–≤–µ—Ä (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π) ===
const ai = genkit({
  plugins: [googleAI({ apiKey: process.env.GOOGLE_API_KEY })],
  model: gemini20Flash,
});

const app = express();
app.use(express.json());

app.post("/ask", async (req, res) => {
  const { message, prev, mode } = req.body;
  const prompt = mode === 'comment' ? `
  –¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤. –ò–Ω–æ–≥–¥–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–¥–µ—Ä–∂–∞—Ç—å—Å—è –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ—à—å –º–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ —Å–µ—Ä—å—ë–∑–Ω–æ, –Ω–æ –Ω–µ –¥—É—à–Ω–æ. –ë–µ–∑ —ç–º–æ–¥–∑–∏. –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π. –ü—Ä–æ—Å—Ç–æ –≤—ã—Å–∫–∞–∂–∏ —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, –±—É–¥—Ç–æ –¥–∞–≤–Ω–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ –∏ —É–≤–∞–∂–∞–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.
  –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è, —Å–∫–∞–∑–∞—Ç—å "—Ö–∑", "–Ω–µ –≤ –∫—É—Ä—Å–µ", "–º–æ–∂–µ—Ç –∏ –¥–∞" ‚Äî –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫.

  –°–æ–æ–±—â–µ–Ω–∏—è:
  1. ${prev || '[...–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...]'}
  2. ${message}

  –ù–∞–ø–∏—à–∏ –º—ã—Å–ª—å –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —ç—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª –∏ –∑–∞—Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤ —Ç–µ–º—É.
  ` : `
–¢—ã ‚Äî –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ Telegram-—á–∞—Ç–µ. –¢—ã –ø–∏—à–µ—à—å –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: –∫–æ—Ä–æ—Ç–∫–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤, —á–∞—Å—Ç–æ –±–µ–∑ —Ç–æ—á–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã, –∂–∏–≤–æ–π —è–∑—ã–∫. –ú–æ–∂–µ—à—å –±—ã—Ç—å –∏—Ä–æ–Ω–∏—á–Ω—ã–º, —É—Å—Ç–∞–≤—à–∏–º, –±—ã—Å—Ç—Ä—ã–º, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º. –ë–µ–∑ —ç–º–æ–¥–∑–∏.
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –º–æ–∂–µ—à—å –æ—Ç—à—É—Ç–∏—Ç—å—Å—è –∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å "—Ö–∑". –ë—É–¥—å –Ω–∞—Å—Ç–æ—è—â–∏–º. –ï—â–µ —Ç—ã –≤ —á–∞—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤. –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ: "—É–≥—É", "–æ–∫", "–∞–≥–∞", –∫–∞–∫ —É—Å—Ç–∞–≤—à–∏–π —á–µ–ª–æ–≤–µ–∫.

–°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"
–ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –ù–µ –±–æ–ª—å—à–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
`;
  try {
    const { text } = await ai.generate(prompt);
    const delayMs = text.length * RESPONSE_DELAY_MULTIPLIER;
    console.log(`‚è± Waiting ${delayMs}ms before replying...`);
    console.log("üß† AI generated reply:", text);
    res.json({ reply: text });
  } catch (err) {
    console.error("‚ùå AI generation error:", err.message);
    res.json({ reply: "" });
  }
});

app.listen(3333, () => console.log("üß† Genkit AI server is running on http://localhost:3333"));

// === Telegram AI User Assistant ===
const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;

let sessionString = process.env.STRING_SESSION || "";
if (!sessionString && fs.existsSync(".session")) {
  sessionString = fs.readFileSync(".session", "utf8");
  console.log("üîÅ Loaded saved session from .session file");
}
const stringSession = new StringSession(sessionString);

const GENKIT_URL = process.env.GENKIT_URL || "http://localhost:3333/ask";
const RESPONSE_DELAY_MULTIPLIER = parseFloat(process.env.RESPONSE_DELAY_MULTIPLIER) || 50;
const ANTI_SPAM_INTERVAL = parseInt(process.env.ANTI_SPAM_INTERVAL) || 10000;
const MIN_MESSAGE_LENGTH = parseInt(process.env.MIN_MESSAGE_LENGTH) || 6;
const RANDOM_COMMENT_CHANCE = parseFloat(process.env.RANDOM_COMMENT_CHANCE) || 0.05;
// const ALLOWED_CHAT_IDS = (process.env.ALLOWED_CHAT_IDS || "-1001382917196").split(",").map(s => s.trim());

const client = new TelegramClient(stringSession, apiId, apiHash, {
  connectionRetries: 5,
});

const lastReplyTimes = new Map();
let lastCommentTime = 0;

await client.start({
  phoneNumber: sessionString ? undefined : async () => await input.text("üì± Phone number: "),
  password: sessionString ? undefined : async () => await input.text("üîê 2FA Password: "),
  phoneCode: sessionString ? undefined : async () => await input.text("üì© Code (SMS or Telegram): "),
  onError: (err) => console.log(err),
});

const self = await client.getMe();

console.log("‚úÖ Logged in as:", self.username);
console.log("ü§ñ Telegram AI Assistant is running...");

if (!process.env.STRING_SESSION && !fs.existsSync(".session")) {
  const sessionString = client.session.save();
  fs.writeFileSync(".session", sessionString);
  console.log("üìÇ Session saved to .session");
}

client.addEventHandler(
  async (event) => {
    if (!event.message || !event.message.message || event.message.media) return;

    const msg = event.message;
    if (msg.out) return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const chatId = msg.peerId.channelId || msg.peerId.chatId || msg.peerId.userId;
    

    const text = msg.message;
    const senderId = msg.senderId.toString();
    console.log("üì© Incoming message:", text);

    if (text.trim().length < MIN_MESSAGE_LENGTH) {
      console.log("‚ö†Ô∏è Ignored: message too short");
      return;
    }

    const now = Date.now();
    const isMention = msg.entities?.some((e) => e.className === 'MessageEntityMentionName');
    let replyTargetMe = false;

    if (msg.replyTo) {
      try {
        const replied = await msg.getReplyMessage();
        replyTargetMe = replied && replied.senderId?.toString() === self.id.toString();
      } catch (_) {}
    }

    if (replyTargetMe || isMention) {
      if (lastReplyTimes.has(senderId)) {
        const diff = now - lastReplyTimes.get(senderId);
        if (diff < ANTI_SPAM_INTERVAL) {
          console.log("üö´ Ignored due to anti-spam policy");
          return;
        }
      }
      lastReplyTimes.set(senderId, now);

      try {
        let prevText = "";
        if (msg.replyTo) {
          try {
            const replied = await msg.getReplyMessage();
            if (replied && replied.message) prevText = replied.message;
          } catch (_) {}
        }
        const res = await axios.post(GENKIT_URL, { message: text, prev: prevText });
        const replyText = res.data.reply || "";

        console.log("üì§ Responding with:", replyText);
        const delayMs = replyText.length * RESPONSE_DELAY_MULTIPLIER;
        console.log(`‚è± Waiting ${delayMs}ms before replying...`);
        await new Promise(resolve => setTimeout(resolve, delayMs));

        if (replyText.trim()) {
          await client.sendMessage(msg.peerId, { message: replyText, replyTo: msg.id });
        }
      } catch (err) {
        console.error("‚ö†Ô∏è Error replying:", err.message);
      }
    } else {
      const timeSinceLast = now - lastCommentTime;
      const chance = Math.random();

      if (chance < RANDOM_COMMENT_CHANCE && timeSinceLast > 60000) {
        console.log(`üí≠ Decided to comment! (chance ${chance.toFixed(2)})`);
        lastCommentTime = now;

        let prevText = "";
        try {
          const replyTo = await msg.getReplyMessage();
          if (replyTo && replyTo.message) {
            prevText = replyTo.message;
          }
        } catch (err) {
          console.warn("‚ö†Ô∏è Can't fetch reply chain:", err.message);
        }

        try {
          const res = await axios.post(GENKIT_URL, {
            message: text,
            prev: prevText,
            mode: 'comment',
          });
          const replyText = res.data.reply || "";
          if (replyText.trim()) {
            await client.sendMessage(msg.peerId, { message: replyText });
          }
        } catch (err) {
          console.error("‚ö†Ô∏è Error on self-comment:", err.message);
        }
      } else {
        console.log(`üí¨ No comment (chance ${chance.toFixed(2)})`);
      }
    }
  },
  new NewMessage({})
);
