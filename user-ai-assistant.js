// user-ai-assistant.js
import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { NewMessage } from "telegram/events/index.js";
import input from "input";
import dotenv from "dotenv";
import axios from "axios";
import fs from "fs";
import express from "express";
import { genkit } from "genkit";
import { googleAI, gemini20Flash } from "@genkit-ai/googleai";

dotenv.config();

const ai = genkit({
  plugins: [googleAI({ apiKey: process.env.GOOGLE_API_KEY })],
  model: gemini20Flash,
});

const promptData = JSON.parse(fs.readFileSync("./prompts.json", "utf8"));

const app = express();
app.use(express.json());

let stats = {
  startTime: Date.now(),
  messagesSeen: 0,
  repliesSent: 0,
  commentsMade: 0,
  ignored: 0,
};

let pausedUntil = 0;

function isPaused() {
  return Date.now() < pausedUntil;
}

function formatUptime(ms) {
  const sec = Math.floor(ms / 1000) % 60;
  const min = Math.floor(ms / 60000) % 60;
  const hrs = Math.floor(ms / 3600000);
  return `${hrs}—á ${min}–º ${sec}—Å`;
}

const ADMIN_IDS = (process.env.ADMIN_IDS || "565536669")
  .split(",")
  .map((x) => x.trim());

function getHumanDelay(text) {
  const base = text.length * (parseFloat(process.env.RESPONSE_DELAY_MULTIPLIER) || 50);
  const randomness = 1000 + Math.random() * 3000;
  const thinking = Math.random() < 0.3 ? 2000 + Math.random() * 3000 : 0;
  return Math.floor(base + randomness + thinking);
}

let recentMessages = [];
let lastMoodUpdate = 0;
let botMood = 1.0;

function recordMessage(now) {
  recentMessages.push(now);
  recentMessages = recentMessages.filter(t => now - t < 5 * 60 * 1000); // 5 –º–∏–Ω –æ–∫–Ω–æ
}

function updateMood(now) {
  if (now - lastMoodUpdate > 60 * 60 * 1000) { // —Ä–∞–∑ –≤ —á–∞—Å
    botMood = Math.random() * 1.5 + 0.5; // –æ—Ç 0.5 –¥–æ 2.0
    lastMoodUpdate = now;
  }
}

function shouldComment(now, lastTime) {
  const baseChance = parseFloat(process.env.RANDOM_COMMENT_CHANCE || 0.01);
  const minInterval = parseInt(process.env.COMMENT_INTERVAL || 60000);

  recordMessage(now);
  updateMood(now);

  const activityFactor = Math.min(recentMessages.length / 5, 2);
  const finalChance = baseChance * activityFactor * botMood;
  const roll = Math.random();
  const forceOverride = roll > 0.989 && roll < 0.991;

  const should = (now - lastTime > minInterval) && (roll < finalChance || forceOverride);

  console.log(`üìà Activity in last 5 min: ${recentMessages.length} messages`);
  console.log(`üß† Mood factor: ${botMood.toFixed(2)}`);
  console.log(`üé≤ Rolled: ${roll.toFixed(4)} ‚Üí ${forceOverride ? 'override fired!' : 'no fire'}`);
  console.log(`üí¨ ${should ? 'Will comment' : 'No comment'} (final chance ${finalChance.toFixed(4)})`);

  return should;
}

app.post("/ask", async (req, res) => {
  const { message, prev, mode } = req.body;
  const stylePool = promptData[mode || "normal"];
  const modifiers = stylePool.modifiers.join("\n");
  const basePrompt = `${stylePool.basePrompt}\n\n${modifiers}\n\n–ø–∏—à–∏ –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤. –æ—Ç–≤–µ—á–∞–π, –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –æ–¥–Ω–∏–º –≥–ª–∞–∑–æ–º –≤ —Ç–µ–ª–µ—Ñ–æ–Ω.`;

  const prompt = mode === "comment"
    ? `${basePrompt}\n\n–°–æ–æ–±—â–µ–Ω–∏—è:\n1. ${prev || "[...–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...]"}\n2. ${message}\n\n–ù–∞–ø–∏—à–∏ –º—ã—Å–ª—å –ø–æ —Ç–µ–º–µ.`
    : `${basePrompt}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"${message}\"`;

  console.log("üß† Final prompt sent to AI:\n", prompt);

  try {
    const { text } = await ai.generate({ prompt, maxOutputTokens: 150 });
    console.log("üß† AI generated reply:", text);
    res.json({ reply: text });
  } catch (err) {
    console.error("‚ùå AI generation error:", err.message);
    res.json({ reply: "" });
  }
});

app.listen(3333, () => console.log("üß† Genkit AI server is running on http://localhost:3333"));

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;

let sessionString = process.env.STRING_SESSION || "";
if (!sessionString && fs.existsSync(".session")) {
  sessionString = fs.readFileSync(".session", "utf8");
  console.log("üîÅ Loaded saved session from .session file");
}
const stringSession = new StringSession(sessionString);

const GENKIT_URL = process.env.GENKIT_URL || "http://localhost:3333/ask";
const MIN_MESSAGE_LENGTH = parseInt(process.env.MIN_MESSAGE_LENGTH) || 6;

const client = new TelegramClient(stringSession, apiId, apiHash, {
  connectionRetries: 5,
});

const lastReplyTimes = new Map();
let lastCommentTime = 0;

await client.start({
  phoneNumber: sessionString ? undefined : async () => await input.text("üì± Phone number: "),
  password: sessionString ? undefined : async () => await input.text("üîê 2FA Password: "),
  phoneCode: sessionString ? undefined : async () => await input.text("üì© Code (SMS or Telegram): "),
  onError: (err) => console.log(err),
});

const self = await client.getMe();
console.log("‚úÖ Logged in as:", self.username);
console.log("ü§ñ Telegram AI Assistant is running...");

if (!process.env.STRING_SESSION && !fs.existsSync(".session")) {
  const sessionString = client.session.save();
  fs.writeFileSync(".session", sessionString);
  console.log("üìÇ Session saved to .session");
}

client.addEventHandler(
  async (event) => {
    if (!event.message || !event.message.message || event.message.media) return;

    const msg = event.message;
    if (msg.out) return;

    const chatId = msg.peerId.channelId || msg.peerId.chatId || msg.peerId.userId;
    const text = msg.message;
    const senderId = msg.senderId.toString();
    stats.messagesSeen++;

    if (text.trim().toLowerCase() === "/debug" && ADMIN_IDS.includes(senderId)) {
      const uptime = formatUptime(Date.now() - stats.startTime);
      const debugMsg = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
üü¢ –°—Ç–∞—Ç—É—Å: ${isPaused() ? '‚è∏Ô∏è –ü–∞—É–∑–∞ –∞–∫—Ç–∏–≤–Ω–∞' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
üïí –ê–ø—Ç–∞–π–º: ${uptime}

üì¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: <b>${stats.messagesSeen}</b>
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.repliesSent + stats.commentsMade}</b>
‚õî –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>${stats.ignored}</b>
‚Ü©Ô∏è –û—Ç–≤–µ—Ç–æ–≤: <b>${stats.repliesSent}</b>
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>${stats.commentsMade}</b>

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5 –º–∏–Ω): <b>${recentMessages.length}</b>
üß† Mood: <b>${botMood.toFixed(2)}</b>
üïì –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>${new Date(lastCommentTime).toLocaleTimeString()}</i>`;
      await client.sendMessage(msg.peerId, { message: debugMsg, parseMode: 'html', replyTo: msg.id });
      return;
    }

    if (text.trim().toLowerCase() === "/mood" && ADMIN_IDS.includes(senderId)) {
      botMood = Math.random() * 1.5 + 0.5;
      lastMoodUpdate = Date.now();
      await client.sendMessage(msg.peerId, {
        message: `üß† –ù–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${botMood.toFixed(2)}`,
        replyTo: msg.id,
      });
      return;
    }

    if (text.trim().toLowerCase().startsWith("/pause") && ADMIN_IDS.includes(senderId)) {
      const [, minutes] = text.trim().split(" ");
      const mins = parseInt(minutes);
      if (!isNaN(mins) && mins > 0) {
        pausedUntil = Date.now() + mins * 60000;
        await client.sendMessage(msg.peerId, {
          message: `‚è∏Ô∏è –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mins} –º–∏–Ω.`,
          replyTo: msg.id,
        });
      } else {
        await client.sendMessage(msg.peerId, {
          message: `‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç: /pause 10`,
          replyTo: msg.id,
        });
      }
      return;
    }

    if (text.trim().toLowerCase() === "/resume" && ADMIN_IDS.includes(senderId)) {
      pausedUntil = 0;
      await client.sendMessage(msg.peerId, {
        message: `‚ñ∂Ô∏è –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω.`,
        replyTo: msg.id,
      });
      return;
    }

    if (text.trim().toLowerCase() === "/mood" && ADMIN_IDS.includes(senderId)) {
      botMood = Math.random() * 1.5 + 0.5;
      lastMoodUpdate = Date.now();
      await client.sendMessage(msg.peerId, {
        message: `üß† –ù–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${botMood.toFixed(2)}`,
        replyTo: msg.id,
      });
      return;
    }

    console.log("üì© Incoming message:", text);

    if (isPaused()) {
      console.log("‚è∏Ô∏è Ignored: bot is paused");
      return;
    }

    if (text.trim().length < MIN_MESSAGE_LENGTH) {
      console.log("‚ö†Ô∏è Ignored: message too short");
      stats.ignored++;
      return;
    }

    const now = Date.now();
    const isMention = msg.entities?.some((e) => e.className === 'MessageEntityMentionName');
    let replyTargetMe = false;

    if (msg.replyTo) {
      try {
        const replied = await msg.getReplyMessage();
        replyTargetMe = replied && replied.senderId?.toString() === self.id.toString();
      } catch (_) {}
    }

    if (replyTargetMe || isMention) {
      if (lastReplyTimes.has(senderId)) {
        const diff = now - lastReplyTimes.get(senderId);
        const antiSpamInterval = parseInt(process.env.ANTI_SPAM_INTERVAL) || 10000;
        if (diff < antiSpamInterval) {
          console.log("üö´ Ignored due to anti-spam policy");
          return;
        }
      }
      lastReplyTimes.set(senderId, now);

      try {
        let prevText = "";
        if (msg.replyTo) {
          try {
            const replied = await msg.getReplyMessage();
            if (replied && replied.message) prevText = replied.message;
          } catch (_) {}
        }
        const res = await axios.post(GENKIT_URL, { message: text, prev: prevText });
        const replyText = res.data.reply || "";

        const delayMs = getHumanDelay(replyText);
        console.log(`‚è± Waiting ${delayMs}ms before replying...`);
        await new Promise(resolve => setTimeout(resolve, delayMs));

        if (replyText.trim()) {
          await client.sendMessage(msg.peerId, { message: replyText, replyTo: msg.id });
          stats.repliesSent++;
        }
      } catch (err) {
        console.error("‚ö†Ô∏è Error replying:", err.message);
      }
    } else {
      if (shouldComment(now, lastCommentTime)) {
        console.log("üí≠ Decided to comment!");
        lastCommentTime = now;

        let prevText = "";
        try {
          const replyTo = await msg.getReplyMessage();
          if (replyTo && replyTo.message) prevText = replyTo.message;
        } catch (err) {
          console.warn("‚ö†Ô∏è Can't fetch reply chain:", err.message);
        }

        try {
          const res = await axios.post(GENKIT_URL, {
            message: text,
            prev: prevText,
            mode: 'comment',
          });
          const replyText = res.data.reply || "";
          if (replyText.trim()) {
            await client.sendMessage(msg.peerId, { message: replyText });
            stats.commentsMade++;
          }
        } catch (err) {
          console.error("‚ö†Ô∏è Error on self-comment:", err.message);
        }
      }
    }
  },
  new NewMessage({})
);
